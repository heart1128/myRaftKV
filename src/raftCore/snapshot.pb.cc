// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snapshot.proto

#include "snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Snapshot {
class PersistRaftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistRaft> _instance;
} _PersistRaft_default_instance_;
}  // namespace Snapshot
static void InitDefaultsscc_info_PersistRaft_snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Snapshot::_PersistRaft_default_instance_;
    new (ptr) ::Snapshot::PersistRaft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Snapshot::PersistRaft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistRaft_snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PersistRaft_snapshot_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_snapshot_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_snapshot_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_snapshot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_snapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Snapshot::PersistRaft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Snapshot::PersistRaft, currentterm_),
  PROTOBUF_FIELD_OFFSET(::Snapshot::PersistRaft, votedfor_),
  PROTOBUF_FIELD_OFFSET(::Snapshot::PersistRaft, lastsnapshotincludeindex_),
  PROTOBUF_FIELD_OFFSET(::Snapshot::PersistRaft, lastsnapshotincludeterm_),
  PROTOBUF_FIELD_OFFSET(::Snapshot::PersistRaft, logs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Snapshot::PersistRaft)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Snapshot::_PersistRaft_default_instance_),
};

const char descriptor_table_protodef_snapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016snapshot.proto\022\010Snapshot\"\205\001\n\013PersistRa"
  "ft\022\023\n\013CurrentTerm\030\001 \001(\005\022\020\n\010VotedFor\030\002 \001("
  "\005\022 \n\030LastSnapshotIncludeIndex\030\003 \001(\005\022\037\n\027L"
  "astSnapshotIncludeTerm\030\004 \001(\005\022\014\n\004Logs\030\005 \003"
  "(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_snapshot_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_snapshot_2eproto_sccs[1] = {
  &scc_info_PersistRaft_snapshot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_snapshot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snapshot_2eproto = {
  false, false, descriptor_table_protodef_snapshot_2eproto, "snapshot.proto", 170,
  &descriptor_table_snapshot_2eproto_once, descriptor_table_snapshot_2eproto_sccs, descriptor_table_snapshot_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_snapshot_2eproto::offsets,
  file_level_metadata_snapshot_2eproto, 1, file_level_enum_descriptors_snapshot_2eproto, file_level_service_descriptors_snapshot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_snapshot_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_snapshot_2eproto)), true);
namespace Snapshot {

// ===================================================================

void PersistRaft::InitAsDefaultInstance() {
}
class PersistRaft::_Internal {
 public:
};

PersistRaft::PersistRaft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Snapshot.PersistRaft)
}
PersistRaft::PersistRaft(const PersistRaft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&currentterm_, &from.currentterm_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
    reinterpret_cast<char*>(&currentterm_)) + sizeof(lastsnapshotincludeterm_));
  // @@protoc_insertion_point(copy_constructor:Snapshot.PersistRaft)
}

void PersistRaft::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistRaft_snapshot_2eproto.base);
  ::memset(&currentterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
      reinterpret_cast<char*>(&currentterm_)) + sizeof(lastsnapshotincludeterm_));
}

PersistRaft::~PersistRaft() {
  // @@protoc_insertion_point(destructor:Snapshot.PersistRaft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PersistRaft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PersistRaft::ArenaDtor(void* object) {
  PersistRaft* _this = reinterpret_cast< PersistRaft* >(object);
  (void)_this;
}
void PersistRaft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersistRaft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistRaft& PersistRaft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistRaft_snapshot_2eproto.base);
  return *internal_default_instance();
}


void PersistRaft::Clear() {
// @@protoc_insertion_point(message_clear_start:Snapshot.PersistRaft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  ::memset(&currentterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
      reinterpret_cast<char*>(&currentterm_)) + sizeof(lastsnapshotincludeterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersistRaft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 CurrentTerm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          currentterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 VotedFor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          votedfor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LastSnapshotIncludeIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastsnapshotincludeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LastSnapshotIncludeTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lastsnapshotincludeterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes Logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistRaft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Snapshot.PersistRaft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CurrentTerm = 1;
  if (this->currentterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_currentterm(), target);
  }

  // int32 VotedFor = 2;
  if (this->votedfor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_votedfor(), target);
  }

  // int32 LastSnapshotIncludeIndex = 3;
  if (this->lastsnapshotincludeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastsnapshotincludeindex(), target);
  }

  // int32 LastSnapshotIncludeTerm = 4;
  if (this->lastsnapshotincludeterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastsnapshotincludeterm(), target);
  }

  // repeated bytes Logs = 5;
  for (int i = 0, n = this->_internal_logs_size(); i < n; i++) {
    const auto& s = this->_internal_logs(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Snapshot.PersistRaft)
  return target;
}

size_t PersistRaft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Snapshot.PersistRaft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes Logs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logs_.size());
  for (int i = 0, n = logs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      logs_.Get(i));
  }

  // int32 CurrentTerm = 1;
  if (this->currentterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentterm());
  }

  // int32 VotedFor = 2;
  if (this->votedfor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_votedfor());
  }

  // int32 LastSnapshotIncludeIndex = 3;
  if (this->lastsnapshotincludeindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastsnapshotincludeindex());
  }

  // int32 LastSnapshotIncludeTerm = 4;
  if (this->lastsnapshotincludeterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastsnapshotincludeterm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistRaft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Snapshot.PersistRaft)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistRaft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistRaft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Snapshot.PersistRaft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Snapshot.PersistRaft)
    MergeFrom(*source);
  }
}

void PersistRaft::MergeFrom(const PersistRaft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Snapshot.PersistRaft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.currentterm() != 0) {
    _internal_set_currentterm(from._internal_currentterm());
  }
  if (from.votedfor() != 0) {
    _internal_set_votedfor(from._internal_votedfor());
  }
  if (from.lastsnapshotincludeindex() != 0) {
    _internal_set_lastsnapshotincludeindex(from._internal_lastsnapshotincludeindex());
  }
  if (from.lastsnapshotincludeterm() != 0) {
    _internal_set_lastsnapshotincludeterm(from._internal_lastsnapshotincludeterm());
  }
}

void PersistRaft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Snapshot.PersistRaft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistRaft::CopyFrom(const PersistRaft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Snapshot.PersistRaft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistRaft::IsInitialized() const {
  return true;
}

void PersistRaft::InternalSwap(PersistRaft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersistRaft, lastsnapshotincludeterm_)
      + sizeof(PersistRaft::lastsnapshotincludeterm_)
      - PROTOBUF_FIELD_OFFSET(PersistRaft, currentterm_)>(
          reinterpret_cast<char*>(&currentterm_),
          reinterpret_cast<char*>(&other->currentterm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistRaft::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Snapshot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Snapshot::PersistRaft* Arena::CreateMaybeMessage< ::Snapshot::PersistRaft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Snapshot::PersistRaft >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
