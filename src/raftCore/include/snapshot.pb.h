// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snapshot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snapshot_2eproto;
namespace Snapshot {
class PersistRaft;
class PersistRaftDefaultTypeInternal;
extern PersistRaftDefaultTypeInternal _PersistRaft_default_instance_;
}  // namespace Snapshot
PROTOBUF_NAMESPACE_OPEN
template<> ::Snapshot::PersistRaft* Arena::CreateMaybeMessage<::Snapshot::PersistRaft>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Snapshot {

// ===================================================================

class PersistRaft PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Snapshot.PersistRaft) */ {
 public:
  inline PersistRaft() : PersistRaft(nullptr) {};
  virtual ~PersistRaft();

  PersistRaft(const PersistRaft& from);
  PersistRaft(PersistRaft&& from) noexcept
    : PersistRaft() {
    *this = ::std::move(from);
  }

  inline PersistRaft& operator=(const PersistRaft& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistRaft& operator=(PersistRaft&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistRaft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistRaft* internal_default_instance() {
    return reinterpret_cast<const PersistRaft*>(
               &_PersistRaft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PersistRaft& a, PersistRaft& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistRaft* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersistRaft* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistRaft* New() const final {
    return CreateMaybeMessage<PersistRaft>(nullptr);
  }

  PersistRaft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistRaft>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistRaft& from);
  void MergeFrom(const PersistRaft& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistRaft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Snapshot.PersistRaft";
  }
  protected:
  explicit PersistRaft(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snapshot_2eproto);
    return ::descriptor_table_snapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 5,
    kCurrentTermFieldNumber = 1,
    kVotedForFieldNumber = 2,
    kLastSnapshotIncludeIndexFieldNumber = 3,
    kLastSnapshotIncludeTermFieldNumber = 4,
  };
  // repeated bytes Logs = 5;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  const std::string& logs(int index) const;
  std::string* mutable_logs(int index);
  void set_logs(int index, const std::string& value);
  void set_logs(int index, std::string&& value);
  void set_logs(int index, const char* value);
  void set_logs(int index, const void* value, size_t size);
  std::string* add_logs();
  void add_logs(const std::string& value);
  void add_logs(std::string&& value);
  void add_logs(const char* value);
  void add_logs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logs();
  private:
  const std::string& _internal_logs(int index) const;
  std::string* _internal_add_logs();
  public:

  // int32 CurrentTerm = 1;
  void clear_currentterm();
  ::PROTOBUF_NAMESPACE_ID::int32 currentterm() const;
  void set_currentterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentterm() const;
  void _internal_set_currentterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 VotedFor = 2;
  void clear_votedfor();
  ::PROTOBUF_NAMESPACE_ID::int32 votedfor() const;
  void set_votedfor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_votedfor() const;
  void _internal_set_votedfor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LastSnapshotIncludeIndex = 3;
  void clear_lastsnapshotincludeindex();
  ::PROTOBUF_NAMESPACE_ID::int32 lastsnapshotincludeindex() const;
  void set_lastsnapshotincludeindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastsnapshotincludeindex() const;
  void _internal_set_lastsnapshotincludeindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LastSnapshotIncludeTerm = 4;
  void clear_lastsnapshotincludeterm();
  ::PROTOBUF_NAMESPACE_ID::int32 lastsnapshotincludeterm() const;
  void set_lastsnapshotincludeterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastsnapshotincludeterm() const;
  void _internal_set_lastsnapshotincludeterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Snapshot.PersistRaft)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logs_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentterm_;
  ::PROTOBUF_NAMESPACE_ID::int32 votedfor_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastsnapshotincludeindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastsnapshotincludeterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PersistRaft

// int32 CurrentTerm = 1;
inline void PersistRaft::clear_currentterm() {
  currentterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistRaft::_internal_currentterm() const {
  return currentterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistRaft::currentterm() const {
  // @@protoc_insertion_point(field_get:Snapshot.PersistRaft.CurrentTerm)
  return _internal_currentterm();
}
inline void PersistRaft::_internal_set_currentterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentterm_ = value;
}
inline void PersistRaft::set_currentterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentterm(value);
  // @@protoc_insertion_point(field_set:Snapshot.PersistRaft.CurrentTerm)
}

// int32 VotedFor = 2;
inline void PersistRaft::clear_votedfor() {
  votedfor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistRaft::_internal_votedfor() const {
  return votedfor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistRaft::votedfor() const {
  // @@protoc_insertion_point(field_get:Snapshot.PersistRaft.VotedFor)
  return _internal_votedfor();
}
inline void PersistRaft::_internal_set_votedfor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  votedfor_ = value;
}
inline void PersistRaft::set_votedfor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_votedfor(value);
  // @@protoc_insertion_point(field_set:Snapshot.PersistRaft.VotedFor)
}

// int32 LastSnapshotIncludeIndex = 3;
inline void PersistRaft::clear_lastsnapshotincludeindex() {
  lastsnapshotincludeindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistRaft::_internal_lastsnapshotincludeindex() const {
  return lastsnapshotincludeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistRaft::lastsnapshotincludeindex() const {
  // @@protoc_insertion_point(field_get:Snapshot.PersistRaft.LastSnapshotIncludeIndex)
  return _internal_lastsnapshotincludeindex();
}
inline void PersistRaft::_internal_set_lastsnapshotincludeindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastsnapshotincludeindex_ = value;
}
inline void PersistRaft::set_lastsnapshotincludeindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastsnapshotincludeindex(value);
  // @@protoc_insertion_point(field_set:Snapshot.PersistRaft.LastSnapshotIncludeIndex)
}

// int32 LastSnapshotIncludeTerm = 4;
inline void PersistRaft::clear_lastsnapshotincludeterm() {
  lastsnapshotincludeterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistRaft::_internal_lastsnapshotincludeterm() const {
  return lastsnapshotincludeterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistRaft::lastsnapshotincludeterm() const {
  // @@protoc_insertion_point(field_get:Snapshot.PersistRaft.LastSnapshotIncludeTerm)
  return _internal_lastsnapshotincludeterm();
}
inline void PersistRaft::_internal_set_lastsnapshotincludeterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastsnapshotincludeterm_ = value;
}
inline void PersistRaft::set_lastsnapshotincludeterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastsnapshotincludeterm(value);
  // @@protoc_insertion_point(field_set:Snapshot.PersistRaft.LastSnapshotIncludeTerm)
}

// repeated bytes Logs = 5;
inline int PersistRaft::_internal_logs_size() const {
  return logs_.size();
}
inline int PersistRaft::logs_size() const {
  return _internal_logs_size();
}
inline void PersistRaft::clear_logs() {
  logs_.Clear();
}
inline std::string* PersistRaft::add_logs() {
  // @@protoc_insertion_point(field_add_mutable:Snapshot.PersistRaft.Logs)
  return _internal_add_logs();
}
inline const std::string& PersistRaft::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const std::string& PersistRaft::logs(int index) const {
  // @@protoc_insertion_point(field_get:Snapshot.PersistRaft.Logs)
  return _internal_logs(index);
}
inline std::string* PersistRaft::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:Snapshot.PersistRaft.Logs)
  return logs_.Mutable(index);
}
inline void PersistRaft::set_logs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Snapshot.PersistRaft.Logs)
  logs_.Mutable(index)->assign(value);
}
inline void PersistRaft::set_logs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Snapshot.PersistRaft.Logs)
  logs_.Mutable(index)->assign(std::move(value));
}
inline void PersistRaft::set_logs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Snapshot.PersistRaft.Logs)
}
inline void PersistRaft::set_logs(int index, const void* value, size_t size) {
  logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Snapshot.PersistRaft.Logs)
}
inline std::string* PersistRaft::_internal_add_logs() {
  return logs_.Add();
}
inline void PersistRaft::add_logs(const std::string& value) {
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Snapshot.PersistRaft.Logs)
}
inline void PersistRaft::add_logs(std::string&& value) {
  logs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Snapshot.PersistRaft.Logs)
}
inline void PersistRaft::add_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Snapshot.PersistRaft.Logs)
}
inline void PersistRaft::add_logs(const void* value, size_t size) {
  logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Snapshot.PersistRaft.Logs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PersistRaft::logs() const {
  // @@protoc_insertion_point(field_list:Snapshot.PersistRaft.Logs)
  return logs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PersistRaft::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:Snapshot.PersistRaft.Logs)
  return &logs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Snapshot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snapshot_2eproto
